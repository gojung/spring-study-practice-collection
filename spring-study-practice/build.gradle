buildscript {
    ext {
        springBootVersion = '2.6.8'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.11.RELEASE"
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.17'
    }
}

/*disable 해놓으면 하위 프로젝트의 task를 찾지 못한다*/
//bootJar { enabled = false }

allprojects {
    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'

    group = 'com.gojung'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '11'

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    dependencies {
        /*boot*/
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-web:2.5.5'

        /* swagger */
        implementation "io.springfox:springfox-boot-starter:3.0.0"
        implementation "io.springfox:springfox-swagger-ui:3.0.0"

        /*lombok*/
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'

        /*test*/
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }

    jacoco {
        toolVersion = '0.8.7'
    }

    jacocoTestReport {
        reports {
            html.enabled true
            csv.enabled true
        }

        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                        "com/gojung/*",
                ])
            }))
        }
        finalizedBy 'jacocoTestCoverageVerification'
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                enabled = true
                element = 'METHOD'
                limit {
                    counter = 'METHOD'
                    value = 'COVEREDRATIO'
                    minimum = 0.00
                }
                limit {
                    counter = 'BRANCH'
                    value = 'COVEREDRATIO'
                    minimum = 0.00
                }
                excludes = [
                        'com.gojung.*',
                ]
            }
        }
    }

    task testCoverage(type: Test) {
        group 'verification'
        description 'if test completed, run testCoverage'

        dependsOn(':test',
                ':jacocoTestReport',
                ':jacocoTestCoverageVerification')

        tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
        tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
    }

    test {
        useJUnitPlatform()
        testLogging {
            events "failed"
            exceptionFormat "full"
        }
        finalizedBy 'jacocoTestReport'
    }
}

project(':s3-uploder') {
    dependencies {
    }
}

project(':spring-jpa') {
    dependencies {
    }
}
